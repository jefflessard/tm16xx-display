#!/bin/bash

declare -A CONTROLLER_MAP
CONTROLLER_MAP=( \
	0x00 "fdhisi,fd628\", \"titanmec,tm1628" \
	0x01 "fdhisi,fd620" \
	0x02 "titanmec,tm1618" \
	0x03 "fdhisi,fd650\", \"titanmec,tm1650" \
	0x04 "winrise,hbs658" \
	0x05 "fdhisi,fd655" \
	0x06 "fdhisi,fd6551" \
)
# NOT_SUPPORTED
#	0xFA "il,il3829" \
#	0xFB "pcd,pcd8544" \
#	0xFC "sh,sh1106" \
#	0xFD "ssd,ssd1306" \
#	0xFE "hd,hd44780" \
#)

declare -A DISPLAY_MAP
DISPLAY_MAP=( \
	0x00 "template-display-type1.inc" \
	0x01 "template-display-type1.inc" \
	0x02 "template-display-type2.inc" \
	0x03 "template-display-type3.inc" \
	0x04 "template-display-type0.inc" \
	0x05 "template-display-type0.inc" \
	0x06 "template-display-type4.inc" \
	0x07 "template-display-type1.inc" \
	0x08 "template-display-type0.inc" \
	0x09 "template-display-type0.inc" \
	0x0A "template-display-type5.inc" \
)

declare -A SEGMENTS_MAP
SEGMENTS_MAP=( \
	0x00 "3 1 2 6 4 5 0" \
	0x01 "3 4 5 0 1 2 6" \
	0x02 "0 1 2 3 4 5 6" \
	0x03 "3 1 2 6 4 5 0" \
	0x04 "3 1 2 6 4 5 0" \
	0x05 "3 1 2 6 4 5 0" \
	0x06 "3 1 2 6 4 5 0" \
	0x07 "0 4 5 1 3 2 6" \
	0x08 "2 6 7 3 1 4 5" \
	0x09 "6 4 5 0 1 2 3" \
	0x0A "3 1 2 6 4 5 0" \
)

template() {
	template_file=$1
	device_file=$2

	DAT_GPIO=${gpios[${vfd_gpio_dat[0]}]//&/\\&}
	DAT_PIN=${vfd_gpio_dat[1]}
	DAT_FLAG=${vfd_gpio_dat[2]}
	CLK_GPIO=${gpios[${vfd_gpio_clk[0]}]//&/\\&}
	CLK_PIN=${vfd_gpio_clk[1]}
	CLK_FLAG=${vfd_gpio_clk[2]}
	CS_GPIO=${gpios[${vfd_gpio_stb[0]}]//&/\\&}
	CS_PIN=${vfd_gpio_stb[1]}
	CS_FLAG=${vfd_gpio_stb[2]}
	CONTROLLER=${CONTROLLER_MAP[${vfd_display_type[3]}]}
	DIGITS=(${vfd_chars[@]:1})
	IFS=" " SEGMENTS=(${SEGMENTS_MAP[${vfd_display_type[0]}]})
	TRANSPOSED=${vfd_display_type[2]}
	display_type=${DISPLAY_MAP[${vfd_display_type[0]}]}
	LED_INDEX=${vfd_chars[0]}

	digit_items=""
	index=0
	for digit in "${DIGITS[@]}"; do
		addresses=""
		for segment in "${SEGMENTS[@]}"; do
			if [ "$TRANSPOSED" == "0x00" ]; then
				addresses+="<$digit $segment>,\n\t\t\t\t\t\t   "
			else
				addresses+="<$segment $((7 - digit))>,\n\t\t\t\t\t\t   "
			fi
		done
		digit_items+=\
"digit@$index {
	reg = <$index>;
	segments = ${addresses%,\\n\\t* *};
};
"
		((index++))
	done
	digit_items=${digit_items:0:-1}
	digit_items=${digit_items//$'\n'/\\n\\t\\t\\t\\t}

	if [[ "$CONTROLLER" == "fdhisi,fd650"* ]]; then
		led_items="$(cat "template-display-type-fd650.inc")"
		if [ "$TRANSPOSED" == "0x00" ]; then
			grid="${DIGITS[-1]}"
			segment=7
			led_items="${led_items//'{GRID}'/$grid}"
			led_items="${led_items//'{LED}'/$segment}"
		else
			led_items="${led_items//'{GRID}'/$segment}"
			led_items="${led_items//'{LED}'/$((7 - $grid))}"
		fi
	else
		led_items="$(cat "$display_type")"
		for (( i=0; i<${#vfd_dot_bits[@]}; i++ )); do
			segment="${vfd_dot_bits[$i]}"
			if [ "$TRANSPOSED" == "0x00" ]; then
				led_items="${led_items//'{GRID'$i'}'/$LED_INDEX}"
				led_items="${led_items//'{LED'$i'}'/$segment}"
			else
				led_items="${led_items//'{GRID'$i'}'/$segment}"
				led_items="${led_items//'{LED'$i'}'/$((7 - $LED_INDEX))}"
			fi
		done
	fi
	led_items=${led_items//$'\n'/\\n\\t\\t\\t\\t}

	sed ${template_file} \
		-e "s/{DAT_GPIO}/${DAT_GPIO}/g" \
		-e "s/{DAT_PIN}/${DAT_PIN}/g" \
		-e "s/{DAT_FLAG}/${DAT_FLAG}/g" \
		-e "s/{CLK_GPIO}/${CLK_GPIO}/g" \
		-e "s/{CLK_PIN}/${CLK_PIN}/g" \
		-e "s/{CLK_FLAG}/${CLK_FLAG}/g" \
		-e "s/{CS_GPIO}/${CS_GPIO}/g" \
		-e "s/{CS_PIN}/${CS_PIN}/g" \
		-e "s/{CS_FLAG}/${CS_FLAG}/g" \
		-e "s/{CONTROLLER}/${CONTROLLER}/g" \
		-e "s/{DIGITS}$/${digit_items}/g" \
		-e "s|{LEDS}|${led_items}|g" \
		> ${device_file}
}

convert_file() {
	src_file="$1"
	dst_file="$2"

	declare -A gpios
	while IFS== read -r key value; do
		gpios["$key"]="$value"
	done < <(grep -Eo "[0-9] = &[[:alnum:]_]+" "$src_file" | tr -d " ")

	source "$src_file"
	IFS=, vfd_gpio_clk=($vfd_gpio_clk)
	IFS=, vfd_gpio_dat=($vfd_gpio_dat)
	IFS=, vfd_gpio_stb=($vfd_gpio_stb)
	IFS=, vfd_chars=($vfd_chars)
	IFS=, vfd_dot_bits=($vfd_dot_bits)
	IFS=, vfd_display_type=($vfd_display_type)

	controller="${CONTROLLER_MAP[${vfd_display_type[3]}]}"

	if [[ -n $controller ]]
	then
		client=$([ "${vfd_gpio_stb[2]}" = "0xFF" ] && echo i2c || echo spi)
		template "template-${client}.dtso" "$dst_file"
	else
		echo "$device: controller not supported" >&2
	fi

}

convert_recursive() {
	src_dir="$1"
	dst_dir="$2"

	while read file
	do
		device="$(echo $file | sed -E "s|^.*/(.*)-vfd.conf.*|\\1|")"

		convert_file "$file" "$dst_dir/$device.dtso"
	done < <(find "$src_dir" -type f -iname "*-vfd.conf")
}

usage() {
    echo "Usage:"
    echo "  $0 -r <input_directory> <output_directory>"
    echo "  $0 <input_file> <output_file>"
    exit 1
}

# Check for directory processing (-r flag)
if [ "$1" == "-r" ]; then
	[ $# -ne 3 ] && usage
	[ ! -d "$2" ] && echo "Error: Directory '$2' does not exist." >&2 && exit 1
	mkdir -p "$3"
	convert_recursive "$2" "$3"
else
	[ $# -ne 2 ] && usage
	[ ! -f "$1" ] && echo "Error: File '$1' does not exist." >&2 && exit 1
	convert_file "$1" "$2"
fi
